#!/usr/bin/python

'''
NAME
    ht - (headtail) output the first and last lines of files

SYNOPSIS
    ht [OPTION]... [FILE]...

    Print the beginning and end of each file.
    Prints '...' for omitted lines.
    Defaults to first 10 and last 10 lines.
    Standard input may be specified by - argument.
    If no file is specified, uses standard input.

    Output header lines if more than one file.
        Adds a line between output of multiple files.

OPTIONS
    -n, --lines=n
        Specify the number of lines from beginning and end of file to print.

    --head-lines=n
        Specify the number of lines from beginning of file to print.

    --tail-lines=n
        Specify the number of lines from end of file to print.

    -v, --verbose
        Print headers.

    -q, --quiet, --silent
        Do not print headers.

    --help
        Show this and quit.

EXAMPLES
    ls -l ~ | ht -20
        Shows first 20 and last 20 lines of output of previous command.

    ht --head-lines=1 --tail-lines=3 *.py
        Shows first line and last three lines of each *.py file.

LICENSE

    Copyright (c) 2016 James Prior

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.
'''

from __future__ import print_function
import sys
import re
from itertools import islice

def do_file(f, n_head_lines, n_tail_lines):

    f = iter(f)
    for line in islice(f, n_head_lines):
        print(line, end='')

    tail_lines = [None for _ in range(n_tail_lines)]
    for i, line in enumerate(f):
        tail_lines[i%n_tail_lines] = line
    try:
        n = i + 1
    except NameError:
        return  # i is not defined because there are no tail lines, so quit.

    if n > n_tail_lines:
        print('...')
    for i in range(n - n_tail_lines, n):
        line = tail_lines[i%n_tail_lines]
        if not line:
            continue
        print(line, end='')

def show_header(show_filename, filename, i):
    if not show_filename:
        return

    if i > 0:
        print()
    print('==> %s <==' % filename)

def main(argv, stdin):

    n_head_lines = 10
    n_tail_lines = 10

    forbid_headers = False
    require_headers = False

    number_argument_pattern = re.compile('^(-|--lines=)(?P<n>\d+)$')
    n_head_lines_pattern = re.compile('^--head-lines=(?P<n>\d+)$')
    n_tail_lines_pattern = re.compile('^--tail-lines=(?P<n>\d+)$')

    filenames = []
    args = iter(argv[1:])
    for arg in args:
        if arg == '--help':
            print(__doc__)
            return
        if arg == '-':
            filenames.append(arg)
            continue
        if arg in ('-v', '--verbose',):
            require_headers = True
            continue
        if arg in ('-q', '--quiet', '--silent'):
            forbid_headers = True
            continue
        m = re.match(number_argument_pattern, arg)
        if m:
            n = int(m.group('n'))
            n_head_lines = n
            n_tail_lines = n
            continue
        m = re.match(n_head_lines_pattern, arg)
        if m:
            n = int(m.group('n'))
            n_head_lines = n
            continue
        m = re.match(n_tail_lines_pattern, arg)
        if m:
            n = int(m.group('n'))
            n_tail_lines = n
            continue
        filenames.append(arg)

    assert not (forbid_headers and require_headers)
    show_headers = (
        (len(filenames) > 1 or require_headers)
        and not forbid_headers)

    if not filenames:
        filenames.append('-')

    for i, filename in enumerate(filenames):
        if filename == '-':
            f = stdin
            filename = 'standard input'
        else:
            f = open(filename)
        show_header(show_headers, filename, i)
        do_file(f, n_head_lines, n_tail_lines)

if __name__ == '__main__':
    main(sys.argv, sys.stdin)
